#!/usr/bin/env ruby
Signal.trap("PIPE", "EXIT")

require "abort_if"
require "fileutils"
require "parse_fasta"
require "parallel"
require "pasv_lib"
require "optimist"

include AbortIf
include AbortIf::Assert
PasvLib.extend PasvLib::Utils
Time.extend PasvLib::CoreExtensions::Time
Process.extend PasvLib::CoreExtensions::Process

PIPELINE_VERSION = "1.1.10"
VERSION_BANNER = %Q{  # Pipeline version: #{PIPELINE_VERSION}
  # Lib version: #{PasvLib::VERSION}
  # Copyright 2017 - 2019 Ryan Moore
  # Contact: moorer@udel.edu
  # Website: https://github.com/mooreryan/pasv
  # License: MIT}

MAX_RETRIES = 100

opts = Optimist.options do
  version VERSION_BANNER
  banner <<-EOS

#{VERSION_BANNER}

  Trust the Process. Trust the PASV.

  Usage: pasv [-a aligner] [-p 'alignment params'] [-i 'I/O format string'] [-s region_start] [-e region_end] [-o outdir] [-t num cpus] -r ref_seqs -q query_seqs pos1 [pos2 ...]

  If you are not interested in a spanning region, do not pass -s and
  -e or pass: -s -1 -e -1

  When you specify options for the aligner or I/O string for the
  aligner and those options start with a '-' (dash) character, you
  must put a '\\' (backslash) character in front of the dash like this:

    -p '\\--threads 1 \\--iterations 1'

  or like this

    -i '\\-i %s \\-o %s'

  Also be sure to use single quotes for these types of arguments.

  If some sequences have identical headers, only the first one will be
  kept.


  Options:
  EOS

  # Input files
  opt(:refs,
      "(required) Fasta with refs",
      type: :string)
  opt(:queries,
      "(required) Fasta with queries",
      type: :string)

  # Alignment options
  opt(:aligner,
      "Name of alignment program",
      default: "clustalo")
  opt(:alignment_parameters,
      "Parameters to send to alignment program (in quotes). " +
      "E.g., -p '\\--iter 10'",
      short: "p",
      types: :strings,
      default: "\--threads 1")
  opt(:io_format_string,
      "IO format string for alignment program (in quotes).",
      default: "\-i %s \-o %s")

  # Region of interest options
  opt(:start,
      "Start of ROI",
      default: -1)
  opt(:end,
      "End of ROI",
      default: -1)

  # Pipeline opts
  opt(:threads,
      "Number of cpus.  If 10, will run 10 alignments at a time.",
      default: 1)

  # Output options
  opt(:outdir,
      "Output directory",
      default: "pasv")
  opt(:min_count,
      "Minimum count for a type to be written",
      default: 2)
end

opts[:alignment_parameters] = opts[:alignment_parameters].tr("\\", "")
opts[:io_format_string] = opts[:io_format_string].tr("\\", "")

abort_if File.exist?(opts[:outdir]),
         "--outdir #{opts[:outdir]} already exists."
abort_unless_file_exists opts[:queries]
abort_unless_file_exists opts[:refs]

abort_unless opts[:start] == -1 || opts[:start] >= 1,
             "--start must be -1 or >= 1, got #{opts[:start]}"
abort_unless opts[:end] == -1 || opts[:end] >= 1,
             "--end must be -1 or >= 1, got #{opts[:end]}"
abort_if opts[:start] >= opts[:end] && opts[:start] != -1 && opts[:end] != -1,
         "--start must be less than --end unless they are both -1"

abort_if opts[:threads] < 1,
         "--threads must be >= 1"

abort_unless opts[:min_count] >= 1,
             "--min-count must be >= 1"

if opts[:aligner] == "mafft"
  opts[:alignment_parameters] = "--thread 1 --quiet"
  opts[:io_format_string] = "%s > %s"
end

# TODO check that the start, end, and key posns are within they key seq.

FileUtils.mkdir_p opts[:outdir]


KEY_POSNS = ARGV.map(&:to_i)

abort_if KEY_POSNS.empty?,
         "Missing key positions.  Provide at least 1."

refs = {}
n = 0
ParseFasta::SeqFile.open(opts[:refs]).each_record do |rec|
  if n.zero?
    head = "first_pasv_ref"
  else
    head = "pasv_ref___#{rec.id}"
  end

  refs[head] = rec.seq

  n += 1

end

queries = {}
ParseFasta::SeqFile.open(opts[:queries]).each_record do |rec|
  header = "pasv_query___#{rec.header}"
  queries[header] = rec.seq
end

aln_infile_base = File.join opts[:outdir], "query"

outfiles = nil

unfinished_queries = queries.map.with_index do |(query_head, ungapped_query_seq), query_idx|
  [query_head, ungapped_query_seq, query_idx]
end

finished_seqs = []

num_iters = 0
until unfinished_queries.empty?
  abort_if num_iters > MAX_RETRIES,
           "Too many errors.  Exceeded max number of retries (#{MAX_RETRIES}).  Please try again."

  begin
    seqs = Parallel.map_with_index(unfinished_queries, in_processes: opts[:threads]) do |(query_head, ungapped_query_seq, query_idx)|
      aln_infile = "#{aln_infile_base}_#{query_idx}"
      aln_outfile = "#{aln_infile_base}_#{query_idx}_aligned"

      File.open(aln_infile, "w") do |f|
        refs.each do |head, seq|
          f.puts ">#{head}\n#{seq}"
        end

        f.puts ">#{query_head}\n#{ungapped_query_seq}"
      end

      io_str = opts[:io_format_string] % [aln_infile, aln_outfile]
      # TODO breaks if aligner expects io info before options
      cmd = "#{opts[:aligner]} #{opts[:alignment_parameters]} #{io_str}"

      begin
        # This can raise either AbortIf::Exit or SystemUniversal::Error
        Process.run_it! cmd
        recs = {}
        query_rec = []
        ParseFasta::SeqFile.open(aln_outfile).each_record do |rec|
          if rec.header.start_with? "pasv_query___"
            orig_header = rec.header[13, rec.header.length]

            query_rec << orig_header << rec.seq
          else
            recs[rec.header] = rec.seq
          end
        end

        gapped_key_seq = recs["first_pasv_ref"]
        pos_to_gapped_pos = PasvLib.pos_to_gapped_pos gapped_key_seq

        query_header = query_rec[0]
        gapped_query_seq = query_rec[1]

        begin
          if opts[:start] == -1 && opts[:end] == -1
            spans_region = "NA"
          else
            gapped_start = pos_to_gapped_pos[opts[:start]]
            gapped_end = pos_to_gapped_pos[opts[:end]]

            abort_if gapped_start.nil?,
                     "gapped_start was nil.  Make sure the first " \
                     "reference spans the ROI start that you " \
                     "specified."
            abort_if gapped_end.nil?,
                     "gapped_end was nil.  Make sure the first " \
                     "reference spans the ROI start that you " \
                     "specified."

            spans_start = PasvLib.spans_start gapped_query_seq, gapped_start
            spans_end = PasvLib.spans_end gapped_query_seq, gapped_end
            spans_region = spans_start && spans_end ? "Yes" : "No"
          end

          oligo = PasvLib.get_oligo gapped_query_seq, KEY_POSNS, pos_to_gapped_pos

          FileUtils.rm aln_infile if File.exist? aln_infile
          FileUtils.rm aln_outfile if File.exist? aln_outfile

          # map() will return this
          [:done, [oligo,
                   spans_region,
                   query_header,
                   ungapped_query_seq]]
        rescue NoMethodError => e
          # Occasionally the tr() method in spans_end will fail as it
          # tries to call on nil.  For now, just mark it as a fail and
          # restart.

          AbortIf.logger.error { "Query #{query_idx} failed.  Will try again later.  Caught NoMethodError (likely in spans_end method). #{e.inspect}" }

          FileUtils.rm aln_infile if File.exist? aln_infile
          FileUtils.rm aln_outfile if File.exist? aln_outfile

          # map() will return this
          [:not_done, [query_head, ungapped_query_seq, query_idx]]
        end
      rescue AbortIf::Exit, SystemUniversal::Error => e
        # it failed so mark it and keep going
        AbortIf.logger.error { "Query #{query_idx} failed with error #{e.inspect}.  Will try again later." }

        FileUtils.rm aln_infile if File.exist? aln_infile
        FileUtils.rm aln_outfile if File.exist? aln_outfile

        # map() will return this
        [:not_done, [query_head, ungapped_query_seq, query_idx]]
      end
    end
  rescue Parallel::DeadWorker => e
    # In case anything goes wrong outside of the mafft alignment to
    # kill the worker.
    AbortIf::logger.error { "There was an error in one or more of the worker threads. (#{e.inspect})" }
    abort
  end

  # Separate the good from the bad.
  bad_count = 0
  unfinished_queries = []
  seqs.each do |status, data|
    if status == :done
      finished_seqs << data
    else
      unfinished_queries << data
      bad_count += 1
    end
  end

  good_count = seqs.count - bad_count
  perc_successful_jobs = (good_count / seqs.count.to_f * 100).round 5
  AbortIf.logger.debug { "Successful jobs: #{good_count} of #{seqs.count} (#{perc_successful_jobs}%)" }

  num_iters += 1
end

# Gather sequences into pasv types
types = {}
finished_seqs.each do |(oligo, spans, header, seq)|
  type = PasvLib.get_type oligo, spans

  rec = [header, seq]

  unless types.has_key? type
    types[type] = []
  end

  types[type] << rec
end

type_counts_fname = File.join opts[:outdir], "pasv_counts.txt"
pasv_types_fname = File.join opts[:outdir], "pasv_types.txt"

File.open(pasv_types_fname, "w") do |pasv_types_f|
  pasv_types_f.puts "seq\ttype"

  File.open(type_counts_fname, "w") do |type_counts_f|
    type_counts_f.puts "type\tcount"

    types.each do |type, seqs|
      # Write the type for each seq
      seqs.each do |(header, seq)|
        pasv_types_f.puts [header, type].join "\t"
      end

      oligo_outf = File.join opts[:outdir], "pasv.partition_#{type}.fa"
      count = seqs.count

      type_counts_f.puts "#{type}\t#{count}"

      if count >= opts[:min_count]
        File.open(oligo_outf, "w") do |f|
          seqs.each do |(header, seq)|
            f.puts ">#{header}\n#{seq}"
          end
        end
      end
    end
  end
end
